--- condor-7.4.2/src/condor_amazon/dom.cpp	2010-06-11 11:32:57.000000000 -0400
+++ Fedora/gsoap/devel/gsoap-2.7/gsoap/dom.cpp	2010-04-06 12:22:29.000000000 -0400
@@ -1,12 +1,12 @@
 /*
 	dom.c[pp]
 
-	gSOAP DOM implementation
+	gSOAP DOM implementation v2
 
 gSOAP XML Web services tools
-Copyright (C) 2000-2008, Robert van Engelen, Genivia, Inc. All Rights Reserved.
+Copyright (C) 2000-2009, Robert van Engelen, Genivia, Inc. All Rights Reserved.
 This part of the software is released under ONE of the following licenses:
-GPL, the gSOAP public license, OR Genivia's license for commercial use.
+GPL, or the gSOAP public license, or Genivia's license for commercial use.
 --------------------------------------------------------------------------------
 gSOAP public license.
 
@@ -19,7 +19,7 @@
 for the specific language governing rights and limitations under the License.
 
 The Initial Developer of the Original Code is Robert A. van Engelen.
-Copyright (C) 2000-2008 Robert A. van Engelen, Genivia inc. All Rights Reserved.
+Copyright (C) 2000-2009 Robert A. van Engelen, Genivia inc. All Rights Reserved.
 --------------------------------------------------------------------------------
 GPL license.
 
@@ -51,13 +51,7 @@
 SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__anyType(struct soap*, struct soap_dom_element const*);
 SOAP_FMAC1 void SOAP_FMAC2 soap_default_xsd__anyType(struct soap*, struct soap_dom_element *);
 SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__anyType(struct soap*, const struct soap_dom_element *, const char*, const char*);
-#ifdef __cplusplus
-extern "C" {
-#endif
 SOAP_FMAC1 int SOAP_FMAC2 soap_out_xsd__anyType(struct soap*, const char*, int, const struct soap_dom_element *, const char*);
-#ifdef __cplusplus
-}
-#endif
 SOAP_FMAC3 struct soap_dom_element * SOAP_FMAC4 soap_get_xsd__anyType(struct soap*, struct soap_dom_element *, const char*, const char*);
 SOAP_FMAC1 struct soap_dom_element * SOAP_FMAC2 soap_in_xsd__anyType(struct soap*, const char*, struct soap_dom_element *, const char*);
 
@@ -71,9 +65,11 @@
 #ifdef __cplusplus
 extern "C" {
 #endif
+
 SOAP_FMAC1 void SOAP_FMAC2 soap_markelement(struct soap*, const void*, int);
 SOAP_FMAC1 int SOAP_FMAC2 soap_putelement(struct soap*, const void*, const char*, int, int);
 SOAP_FMAC1 void *SOAP_FMAC2 soap_getelement(struct soap*, int*);
+
 #ifdef __cplusplus
 }
 #endif
@@ -82,10 +78,10 @@
 #define SOAP_DOMID_FORMAT "dom%d"
 
 /* namespace name (URI) lookup and store routines */
-static struct soap_ilist *soap_lookup_ns_prefix(struct soap*, const char*);
-static struct soap_ilist *soap_enter_ns_prefix(struct soap*, const char*, const char*);
+static const char *soap_lookup_ns_prefix(struct soap*, const char*);
+static const char *soap_push_ns_prefix(struct soap*, const char*, const char*, int);
 
-static int out_element(struct soap *soap, const struct soap_dom_element *node, const char *prefix, const char *name, const char *nstr);
+static int out_element(struct soap *soap, const struct soap_dom_element *node, const char *prefix, const char *name);
 static int out_attribute(struct soap *soap, const char *prefix, const char *name, const char *data, const wchar_t *wide, int flag);
 
 /******************************************************************************\
@@ -156,23 +152,22 @@
 /******************************************************************************/
 
 static int 
-out_element(struct soap *soap, const struct soap_dom_element *node, const char *prefix, const char *name, const char *nstr)
+out_element(struct soap *soap, const struct soap_dom_element *node, const char *prefix, const char *name)
 { if (node->head && soap_send(soap, node->head))
     return soap->error;
-  if (!prefix)
-  { if (node->type && node->node)
-      return soap_putelement(soap, node->node, name, 0, node->type);
-    return soap_element(soap, name, 0, NULL); /* element() */
-  }
   if (node->type && node->node)
-  { char *s = (char*)SOAP_MALLOC(soap, strlen(prefix) + strlen(name) + 2);
-    if (!s)
-      return soap->error = SOAP_EOM;
-    sprintf(s, "%s:%s", prefix, name);
-    soap_putelement(soap, node->node, s, 0, node->type);
-    SOAP_FREE(soap, s);
+  { if (prefix && *prefix)
+    { char *s = (char*)SOAP_MALLOC(soap, strlen(prefix) + strlen(name) + 2);
+      if (!s)
+        return soap->error = SOAP_EOM;
+      sprintf(s, "%s:%s", prefix, name);
+      soap_putelement(soap, node->node, s, 0, node->type);
+      SOAP_FREE(soap, s);
+    }
+    else
+      return soap_putelement(soap, node->node, name, 0, node->type);
   }
-  else
+  else if (prefix && *prefix)
   { char *s;
     if (strlen(prefix) + strlen(name) < sizeof(soap->msgbuf))
       s = soap->msgbuf;
@@ -184,13 +179,11 @@
     sprintf(s, "%s:%s", prefix, name);
     if (soap_element(soap, s, 0, NULL)) /* element() */
       return soap->error;
-    if (nstr)
-    { sprintf(s, "xmlns:%s", prefix);
-      soap_attribute(soap, s, nstr);
-    }
     if (s != soap->msgbuf)
       SOAP_FREE(soap, s);
   }
+  else if (*name != '-')
+    return soap_element(soap, name, 0, NULL); /* element() */
   return soap->error;
 }
 
@@ -203,7 +196,7 @@
   int err;
   if (wide)
     data = soap_wchar2s(soap, wide);
-  if (!prefix)
+  if (!prefix || !*prefix)
   { if (flag)
       return soap_set_attr(soap, name, data);
     return soap_attribute(soap, name, data);
@@ -237,33 +230,26 @@
 SOAP_FMAC2
 soap_out_xsd__anyType(struct soap *soap, const char *tag, int id, const struct soap_dom_element *node, const char *type)
 { if (node)
-  { register struct soap_ilist *p = NULL;
-    const char *prefix;		/* namespace prefix, if namespace is present */
+  { const char *prefix; /* namespace prefix, if namespace is present */
     size_t colon;
     if (!(soap->mode & SOAP_DOM_ASIS))
-    { struct soap_dom_attribute *att;
+    { const struct soap_dom_attribute *att;
       for (att = node->atts; att; att = att->next)
       { if (att->name && att->data && !strncmp(att->name, "xmlns:", 6))
-	{ if (!(soap_enter_ns_prefix(soap, att->name + 6, att->data)))
-            return soap->error = SOAP_EOM;
+	{ if (soap_push_namespace(soap, att->name + 6, att->data) == NULL)
+            return soap->error;
+	}
+        else if (att->name && att->data && !strcmp(att->name, "xmlns"))
+	{ if (soap_push_namespace(soap, "", att->data) == NULL)
+            return soap->error;
 	}
-        else if (att->name && att->nstr)
-        { if ((prefix = strchr(att->name, ':')))
-          { colon = prefix - att->name + 1;
-            if (colon > sizeof(soap->tag))
-              colon = sizeof(soap->tag);
-	    strncpy(soap->tag, att->name, colon - 1);
-            soap->tag[colon - 1] = '\0';
-            if (!(soap_enter_ns_prefix(soap, soap->tag, att->nstr)))
-              return soap->error = SOAP_EOM;
-          }
-        }
       }
     }
     if (node->name)
       tag = node->name;
     else if (!tag)
       tag = "-";
+    DBGLOG(TEST, SOAP_MESSAGE(fdebug, "DOM node '%s' output at level %u\n", tag, soap->level));
     if ((prefix = strchr(tag, ':')))
     { colon = prefix - tag + 1;
       if (colon > sizeof(soap->tag))
@@ -271,50 +257,30 @@
     }
     else
       colon = 0;
-    DBGLOG(TEST, SOAP_MESSAGE(fdebug, "DOM node '%s'\n", tag));
     prefix = NULL;
-    if (node->nstr && !(soap->mode & SOAP_DOM_ASIS))
+    if (node->nstr && *node->nstr && !(soap->mode & SOAP_DOM_ASIS))
     { if (colon)
       { strncpy(soap->tag, tag, colon - 1);
         soap->tag[colon - 1] = '\0';
-        if (!(p = soap_enter_ns_prefix(soap, soap->tag, node->nstr)))
-          return soap->error = SOAP_EOM;
-        prefix = p->id;
-        if (out_element(soap, node, prefix, tag + colon, node->nstr))
+        if ((prefix = soap_push_ns_prefix(soap, soap->tag, node->nstr, 1)) == NULL
+         || out_element(soap, node, prefix, tag + colon))
           return soap->error;
       }
       else
-      { struct Namespace *ns;
-        for (ns = soap->local_namespaces; ns && ns->id; ns++)
-        { if (ns->ns == node->nstr || !strcmp(ns->ns, node->nstr))
-          { /* if (soap->encodingStyle || ns == soap->local_namespaces) */
-              prefix = ns->id;
-            if (out_element(soap, node, ns->id, tag + colon, NULL))
-              return soap->error;
-            break;
-          }
-	}
-        if (!ns || !ns->id)
-        { if ((p = soap_lookup_ns_prefix(soap, node->nstr)))
-          { prefix = p->id;
-            p = NULL;
-            if (out_element(soap, node, prefix, tag + colon, NULL))
-              return soap->error;
-          }
-	  else
-          { sprintf(soap->tag, SOAP_DOMID_FORMAT, soap->idnum++);
-            if (!(p = soap_enter_ns_prefix(soap, soap->tag, node->nstr)))
-              return soap->error = SOAP_EOM;
-            prefix = p->id;
-            if (out_element(soap, node, prefix, tag + colon, node->nstr))
-              return soap->error;
-	  }
+      { if ((prefix = soap_lookup_ns_prefix(soap, node->nstr)))
+        { if (out_element(soap, node, prefix, tag + colon))
+            return soap->error;
+        }
+        else
+	{ if ((prefix = soap_push_ns_prefix(soap, NULL, node->nstr, 1)) == NULL
+           || out_element(soap, node, prefix, tag + colon))
+            return soap->error;
         }
       }
     }
     else
     { colon = 0;
-      if (out_element(soap, node, NULL, tag, NULL))
+      if (out_element(soap, node, NULL, tag))
         return soap->error;
     }
     if (!node->type || !node->node)
@@ -323,41 +289,28 @@
       for (att = node->atts; att; att = att->next)
       { if (att->name)
         { if (att->nstr && !(soap->mode & SOAP_DOM_ASIS))
-          { register struct soap_ilist *q;
+          { const char *p;
             if ((att->nstr == node->nstr || (node->nstr && !strcmp(att->nstr, node->nstr))) && prefix)
 	    { if (out_attribute(soap, prefix, att->name, att->data, att->wide, 0))
 	        return soap->error;
 	    }
-	    else if ((q = soap_lookup_ns_prefix(soap, att->nstr)))
-	    { if (out_attribute(soap, q->id, att->name, att->data, att->wide, 0))
+	    else if ((p = soap_lookup_ns_prefix(soap, att->nstr)))
+	    { if (out_attribute(soap, p, att->name, att->data, att->wide, 0))
 	        return soap->error;
 	    }
-	    else
-            { struct Namespace *ns;
-	      for (ns = soap->local_namespaces; ns && ns->id; ns++)
-              { if (ns->ns == att->nstr || !strcmp(ns->ns, att->nstr))
-	        { /* don't prefix attributes that start with 'xml' */
-		  if (out_attribute(soap, strncmp(att->name, "xml", 3) ? ns->id : NULL, att->name, att->data, att->wide, 0))
-	            return soap->error;
-	          break;
-	        }
-	      }
-	      if (!ns || !ns->id)
-              { sprintf(soap->msgbuf, "xmlns:"SOAP_DOMID_FORMAT, soap->idnum++);
-	        if (soap_attribute(soap, soap->msgbuf, att->nstr))
-	          return soap->error;
-	        strcat(soap->msgbuf, ":");
-	        strcat(soap->msgbuf, att->name);
-	        if (soap_attribute(soap, soap->msgbuf + 6, att->wide ? soap_wchar2s(soap, att->wide) : att->data))
-	          return soap->error;
-              }
-            }
+	    else if (!strncmp(att->name, "xml", 3))
+	    { if (out_attribute(soap, NULL, att->name, att->data, att->wide, 0))
+                return soap->error;
+	    }
+	    else if ((p = soap_push_ns_prefix(soap, NULL, att->nstr, 0)) == NULL
+	          || out_attribute(soap, p, att->name, att->data, att->wide, 0))
+              return soap->error;
           }
 	  else if (soap_attribute(soap, att->name, att->wide ? soap_wchar2s(soap, att->wide) : att->data))
             return soap->error;
         }
       }
-      if (soap_element_start_end_out(soap, NULL))
+      if (*tag != '-' && soap_element_start_end_out(soap, NULL))
         return soap->error;
       if (node->data)
       { if (soap_string_out(soap, node->data, 0))
@@ -373,7 +326,7 @@
       }
       if (node->tail && soap_send(soap, node->tail))
         return soap->error;
-      if (!prefix)
+      if (!prefix || !*prefix)
       { DBGLOG(TEST, SOAP_MESSAGE(fdebug, "End of DOM node '%s'\n", tag + colon));
         if (soap_element_end_out(soap, tag + colon))
           return soap->error;
@@ -387,15 +340,14 @@
           if (!s)
             return soap->error = SOAP_EOM;
 	}
+        DBGLOG(TEST, SOAP_MESSAGE(fdebug, "End of DOM node '%s'\n", tag));
 	sprintf(s, "%s:%s", prefix, tag + colon);
-        DBGLOG(TEST, SOAP_MESSAGE(fdebug, "End of DOM node '%s'\n", s));
+	soap_pop_namespace(soap);
         if (soap_element_end_out(soap, s))
           return soap->error;
         if (s != soap->msgbuf)
 	  SOAP_FREE(soap, s);
       }
-      if (p)
-        p->level = 0; /* xmlns binding is out of scope */
     }
   }
   return SOAP_OK;
@@ -411,55 +363,27 @@
   { const struct soap_dom_attribute *att;
     for (att = node; att; att = att->next)
     { if (att->name && att->data && !strncmp(att->name, "xmlns:", 6))
-      { if (!(soap_enter_ns_prefix(soap, att->name + 6, att->data)))
-          return soap->error = SOAP_EOM;
+      { if (soap_push_namespace(soap, att->name + 6, att->data) == NULL)
+          return soap->error;
       }
-      else if (att->name && att->nstr)
-      { const char *prefix;
-        if ((prefix = strchr(att->name, ':')))
-        { size_t colon = prefix - att->name + 1;
-          if (colon > sizeof(soap->tag))
-            colon = sizeof(soap->tag);
-          strncpy(soap->tag, att->name, colon - 1);
-          soap->tag[colon - 1] = '\0';
-          if (!(soap_enter_ns_prefix(soap, soap->tag, att->nstr)))
-            return soap->error = SOAP_EOM;
-        }
+      else if (att->name && att->data && !strcmp(att->name, "xmlns"))
+      { if (soap_push_namespace(soap, "", att->data) == NULL)
+          return soap->error;
       }
     }
   }
   while (node)
   { if (node->name)
-    { if (node->nstr && !(soap->mode & SOAP_DOM_ASIS) && !strchr(node->name, ':'))
-      { struct soap_ilist *q;
-        if ((q = soap_lookup_ns_prefix(soap, node->nstr)))
-        { if (out_attribute(soap, q->id, node->name, node->data, node->wide, 1))
-            return soap->error;
-        }
-        else
-        { struct Namespace *ns;
-          for (ns = soap->local_namespaces; ns && ns->id; ns++)
-          { if (ns->ns == node->nstr || !strcmp(ns->ns, node->nstr))
-            { /* don't prefix attributes that start with 'xml' */
-    	      if (out_attribute(soap, strncmp(node->name, "xml", 3) ? ns->id : NULL, node->name, node->data, node->wide, 1))
-                return soap->error;
-              break;
-            }
-          }
-          if (!ns || !ns->id)
-          { sprintf(soap->msgbuf, "xmlns:"SOAP_DOMID_FORMAT, soap->idnum++);
-            if (soap_set_attr(soap, soap->msgbuf, node->nstr))
-              return soap->error;
-            strcat(soap->msgbuf, ":");
-            strcat(soap->msgbuf, node->name);
-            if (out_attribute(soap, NULL, soap->msgbuf + 6, node->data, node->wide, 1))
-              return soap->error;
-          }
-        }
+    { if (node->nstr && !(soap->mode & SOAP_DOM_ASIS) && strncmp(node->name, "xml", 3) && !strchr(node->name, ':'))
+      { const char *p;
+        p = soap_lookup_ns_prefix(soap, node->nstr);
+        if (!p && (p = soap_push_ns_prefix(soap, NULL, node->nstr, 1)) == NULL)
+          return soap->error;
+        if (out_attribute(soap, p, node->name, node->data, node->wide, 1))
+          return soap->error;
       }
       else
-      { out_attribute(soap, NULL, node->name, node->data, node->wide, 1);
-      }
+        out_attribute(soap, NULL, node->name, node->data, node->wide, 1);
     }
     node = node->next;
   }
@@ -493,7 +417,7 @@
     else
       node->name = soap_strdup(soap, soap->tag);
   }
-  DBGLOG(TEST, SOAP_MESSAGE(fdebug, "DOM node %s in namespace %s\n", node->name, node->nstr?node->nstr:""));
+  DBGLOG(TEST, SOAP_MESSAGE(fdebug, "DOM node '%s' parsed in namespace '%s'\n", node->name, node->nstr?node->nstr:""));
   if ((soap->mode & SOAP_DOM_NODE) || (!(soap->mode & SOAP_DOM_TREE) && *soap->id))
   { if ((node->node = soap_getelement(soap, &node->type)))
     { DBGLOG(TEST, SOAP_MESSAGE(fdebug, "DOM node contains type %d from xsi:type\n", node->type));
@@ -507,7 +431,7 @@
   att = &node->atts;
   for (tp = soap->attributes; tp; tp = tp->next)
   { if (tp->visible)
-    { DBGLOG(TEST, SOAP_MESSAGE(fdebug, "DOM node attribute='%s'\n", tp->name));
+    { DBGLOG(TEST, SOAP_MESSAGE(fdebug, "DOM node attribute='%s' parsed\n", tp->name));
       *att = (struct soap_dom_attribute*)soap_malloc(soap, sizeof(struct soap_dom_attribute));
       if (!*att)
       { soap->error = SOAP_EOM;
@@ -543,10 +467,9 @@
       elt = &node->elts;
       for (;;)
       { if (!(*elt = soap_in_xsd__anyType(soap, NULL, NULL, NULL)))
-        { if (soap->error == SOAP_NO_TAG)
-            soap->error = SOAP_OK;
-          else
+        { if (soap->error != SOAP_NO_TAG)
             return NULL;
+          soap->error = SOAP_OK;
           break;
         }
 	(*elt)->prnt = node;
@@ -652,42 +575,55 @@
  *
 \******************************************************************************/
 
-static struct soap_ilist *
-soap_lookup_ns_prefix(struct soap *soap, const char *nstr)
-{ register struct soap_ilist *ip;
-  for (ip = soap->iht[soap_hash(nstr)]; ip; ip = ip->next)
-    if (!strcmp((char*)ip->ptr, nstr) && ip->level)
-      return ip;
+static const char *
+soap_lookup_ns_prefix(struct soap *soap, const char *ns)
+{ register struct soap_nlist *np;
+  for (np = soap->nlist; np; np = np->next)
+  { if (np->ns && !strcmp(np->ns, ns)) 
+      return np->id;
+  }
   return NULL;
 }
 
 /******************************************************************************/
 
-static struct soap_ilist *
-soap_enter_ns_prefix(struct soap *soap, const char *prefix, const char *nstr)
-{ size_t h;
-  register struct soap_ilist *ip;
-  for (ip = soap->iht[soap_hash(nstr)]; ip; ip = ip->next)
-  { if (!strcmp((char*)ip->ptr, nstr) && !ip->level)
-    { strcpy(ip->id, prefix);
-      ip->level = 1;
-      return ip;
-    }
-  }
-  ip = (struct soap_ilist*)SOAP_MALLOC(soap, sizeof(struct soap_ilist) + strlen(nstr) + SOAP_TAGLEN);
-  if (ip)
-  { h = soap_hash(nstr);
-    strcpy(ip->id, prefix);
-    ip->ptr = ip->id + SOAP_TAGLEN;
-    strcpy((char*)ip->ptr, nstr);
-    ip->next = soap->iht[h];
-    soap->iht[h] = ip;
-    ip->flist = NULL;
-    ip->copy = NULL;
-    ip->level = 1;
-    return ip;
+static const char *
+soap_push_ns_prefix(struct soap *soap, const char *id, const char *ns, int flag)
+{ register struct soap_nlist *np;
+  if (!id)
+  { struct Namespace *n;
+    for (n = soap->local_namespaces; n && n->id; n++)
+    { if (n->ns == ns || !strcmp(n->ns, ns))
+      { id = n->id;
+        break;
+      }
+    }
+    if (!id)
+    { sprintf(soap->tag, SOAP_DOMID_FORMAT, soap->idnum++);
+      id = soap->tag;
+    }
   }
-  return NULL;
+  /* fix advance generation of xmlns, when element (level) is not output yet */
+  if (flag)
+    soap->level++;
+  np = soap_push_namespace(soap, id, ns);
+  if (flag)
+    soap->level--;
+  if (!np)
+    return NULL;
+  if (!np->ns)
+  { np->ns = soap->local_namespaces[np->index].out;
+    if (!np->ns)
+      np->ns = soap->local_namespaces[np->index].ns;
+  }
+  np->index = 0; /* for C14N utilized mark */
+  if (*np->id)
+  { sprintf(soap->msgbuf, "xmlns:%s", np->id);
+    out_attribute(soap, NULL, soap->msgbuf, ns, NULL, flag);
+  }
+  else
+    out_attribute(soap, NULL, "xmlns", ns, NULL, flag);
+  return np->id;
 }
 
 #ifdef __cplusplus
@@ -1090,6 +1026,7 @@
     soap_init2(&soap, SOAP_IO_DEFAULT, SOAP_XML_GRAPH);
     soap_serialize_xsd__anyType(&soap, &e);
     soap_begin_send(&soap);
+    soap.ns = 2; /* do not dump namespace table */
     soap_out_xsd__anyType(&soap, NULL, 0, &e, NULL);
     soap_end_send(&soap);
     soap_end(&soap);
@@ -1098,10 +1035,11 @@
   else
   { std::ostream *os = e.soap->os;
     e.soap->os = &o;
-    short omode = e.soap->omode;
+    soap_mode omode = e.soap->omode;
     soap_set_omode(e.soap, SOAP_XML_GRAPH);
     soap_serialize_xsd__anyType(e.soap, &e);
     soap_begin_send(e.soap);
+    e.soap->ns = 2; /* do not dump namespace table */
     soap_out_xsd__anyType(e.soap, NULL, 0, &e, NULL);
     soap_end_send(e.soap);
     e.soap->os = os;
